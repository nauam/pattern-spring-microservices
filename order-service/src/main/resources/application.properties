# Order Service
spring.application.name=order-service

## Version
application.title=Order Service
application.version=1.0-SNAPSHOT

## Information
application.datasource=localhost
application.eureka=localhost
application.zipkin=localhost
application.kafka=localhost

## PostgreSQL
spring.datasource.url=jdbc:postgresql://${application.datasource}:5431/order_db
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=admin
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update

## Eureka
eureka.client.serviceUrl.defaultZone=http://eureka:password@${application.eureka}:8761/eureka

## Zipkin and Sleuth
management.zipkin.tracing.endpoint=http://${application.zipkin}:9411
management.tracing.sampling.probability=1.0

## Resilience4j Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

## Resilience4j Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

## Resilience4j Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

# Kafka Properties
spring.kafka.bootstrap-servers=${application.kafka}:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.nauam.orderservice.event.OrderPlacedEvent

## Actuator Prometheus Endpoint
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

## Port
server.port=0
